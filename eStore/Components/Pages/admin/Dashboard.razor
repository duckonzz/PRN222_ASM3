@page "/admin/dashboard"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using BusinessObject.DTO
@using eStore.Authentication
@* @using eStore.Service.Interface *@
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@* @inject IOrderService OrderService *@
@inject IJSRuntime JSRuntime

<PageTitle>Admin Dashboard</PageTitle>

<AuthorizeView Roles="Admin" Context="auth">
    <Authorized>
        <div class="alert alert-success">
            Welcome, @auth.User.Identity?.Name!
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header">
                        Products Management
                    </div>
                    <div class="card-body">
                        <p>Manage your store products</p>
                        <a href="/admin/products" class="btn btn-primary">Manage Products</a>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header">
                        Orders Management
                    </div>
                    <div class="card-body">
                        <p>View and manage customer orders</p>
                        <a href="/admin/orders" class="btn btn-primary">Manage Orders</a>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header">
                        Members Management
                    </div>
                    <div class="card-body">
                        <p>Manage store members</p>
                        <a href="/admin/members" class="btn btn-primary">Manage Members</a>
                    </div>
                </div>
            </div>
        </div>

        @* <div class="card mb-4">
        <div class="card-header">
        <h5>Sales Report</h5>
        </div>
        <div class="card-body">
        <EditForm Model="this">
        <div class="row mb-3">
        <div class="col-md-4">
        <div class="form-group">
        <label for="startDate">Start Date</label>
        <InputDate id="startDate" class="form-control" @bind-Value="startDate" />
        </div>
        </div>
        <div class="col-md-4">
        <div class="form-group">
        <label for="endDate">End Date</label>
        <InputDate id="endDate" class="form-control" @bind-Value="endDate" />
        </div>
        </div>
        <div class="col-md-4 d-flex align-items-end">
        <button type="button" class="btn btn-primary" @onclick="GenerateReport">Generate Report</button>
        </div>
        </div>
        </EditForm>

        @if (isLoading)
        {
        <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
        </div>
        </div>
        }
        else if (reportGenerated)
        {
        <div class="row mb-4">
        <div class="col-md-4">
        <div class="card bg-primary text-white">
        <div class="card-body">
        <h5 class="card-title">Total Sales</h5>
        <h2 class="card-text">@totalSales.ToString("C")</h2>
        </div>
        </div>
        </div>
        <div class="col-md-4">
        <div class="card bg-success text-white">
        <div class="card-body">
        <h5 class="card-title">Total Orders</h5>
        <h2 class="card-text">@totalOrders</h2>
        </div>
        </div>
        </div>
        <div class="col-md-4">
        <div class="card bg-info text-white">
        <div class="card-body">
        <h5 class="card-title">Average Order Value</h5>
        <h2 class="card-text">@(totalOrders > 0 ? (totalSales / totalOrders).ToString("C") : "$0.00")</h2>
        </div>
        </div>
        </div>
        </div>

        <h5>Sales by Order (Descending)</h5>
        <div class="table-responsive">
        <table class="table table-striped table-hover">
        <thead>
        <tr>
        <th>Order ID</th>
        <th>Date</th>
        <th>Customer</th>
        <th>Amount</th>
        <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in salesReport)
        {
        <tr>
        <td>@item.OrderId</td>
        <td>@item.OrderDate.ToString("yyyy-MM-dd")</td>
        <td>@item.MemberCompanyName</td>
        <td>@item.TotalAmount.ToString("C")</td>
        <td>
        <button class="btn btn-sm btn-info" @onclick="() => ViewOrderDetails(item.OrderId)">
        <i class="bi bi-eye"></i> View
        </button>
        </td>
        </tr>
        }
        </tbody>
        </table>
        </div>
        }
        </div>
        </div> *@

        <div class="mt-3">
            <button class="btn btn-primary" @onclick="Logout">
                <i class="bi bi-box-arrow-right"></i> Logout
            </button>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to access this page.</p>
        <a href="/login" class="btn btn-primary">Go to Login</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = null!;

    private DateTime startDate = DateTime.Now.AddMonths(-1);
    private DateTime endDate = DateTime.Now;
    // private List<SalesReportItemDTO> salesReport = new();
    private decimal totalSales = 0;
    private int totalOrders = 0;
    private bool isLoading = false;
    private bool reportGenerated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;

        if (!authState.User.Identity!.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else if (!authState.User.IsInRole("Admin"))
        {
            NavigationManager.NavigateTo("/");
        }
    }

    // private async Task GenerateReport()
    // {
    //     if (endDate < startDate)
    //     {
    //         await JSRuntime.InvokeVoidAsync("alert", "End date cannot be earlier than start date");
    //         return;
    //     }

    //     isLoading = true;
    //     reportGenerated = false;
    //     StateHasChanged();

    //     try
    //     {
    //         salesReport = await OrderService.GetSalesReportAsync(startDate, endDate);
    //         totalSales = await OrderService.GetTotalSalesAsync(startDate, endDate);
    //         totalOrders = await OrderService.GetTotalOrdersAsync(startDate, endDate);

    //         reportGenerated = true;
    //     }
    //     catch (Exception ex)
    //     {
    //         await JSRuntime.InvokeVoidAsync("alert", $"Error generating report: {ex.Message}");
    //     }
    //     finally
    //     {
    //         isLoading = false;
    //         StateHasChanged();
    //     }
    // }

    private void ViewOrderDetails(int orderId)
    {
        NavigationManager.NavigateTo($"/admin/orders?id={orderId}");
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        NavigationManager.NavigateTo("/");
    }
}