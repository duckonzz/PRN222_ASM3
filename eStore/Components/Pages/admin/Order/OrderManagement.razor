@page "/admin/orders"

@using BusinessObject.Entities
@using Service.Services
@using Service.Services.Interfaces

@inject IOrderService OrderService
@inject NavigationManager Navigation

<h3>Order Management</h3>
<button class="btn btn-primary mb-3" @onclick="CreateNewOrder">Create New Order</button>
@if (orders == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Member</th>
                <th>Order Date</th>
                <th>Required Date</th>
                <th>Shipped Date</th>
                <th>Total Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.Member.CompanyName</td>
                    <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                    <td>@(order.RequiredDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                    <td>@(order.ShippedDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                    <td>@CalculateTotal(order).ToString("C")</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary"
                                @onclick="() => EditOrder(order.OrderId)">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-outline-danger"
                                @onclick="() => DeleteOrder(order.OrderId)">
                            Delete
                        </button>
                        <NavLink class="btn btn-sm btn-outline-danger"
                                 href="@($"/admin/orders/{order.OrderId}/details")">
                            <i class="bi bi-trash"></i>View
                        </NavLink>

                    </td>
                </tr>
            }
        </tbody>
    </table>


}

@code {
    private List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetAllOrdersAsync();
    }

    private void CreateNewOrder()
    {
        Navigation.NavigateTo("/admin/orders/create");
    }

    private void EditOrder(int orderId)
    {
        Navigation.NavigateTo($"/admin/orders/edit/{orderId}");
    }
    private async Task DeleteOrder(int orderId)
    {
        await OrderService.DeleteOrderAsync(orderId);
        orders = await OrderService.GetAllOrdersAsync();
        StateHasChanged();
    }
    private decimal CalculateTotal(Order order)
    {
        return order.OrderDetails?.Sum(od => od.UnitPrice * od.Quantity * (1 - (decimal)od.Discount)) ?? 0;
    }
}

