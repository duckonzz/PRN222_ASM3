@page "/categories/edit"
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<AuthorizeView Roles="Admin" Context="auth">
    <Authorized>
<h3>Edit Category</h3>

@if (Category == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="UpdateCategory" FormName="EditCategoryForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Category Name</label>
            <InputText class="form-control" @bind-Value="editableCategory.CategoryName" />
            <ValidationMessage For="() => editableCategory.CategoryName" />
        </div>

        <div class="mb-3">
            <label>Description</label>
            <InputText class="form-control" @bind-Value="editableCategory.Description" />
            <ValidationMessage For="() => editableCategory.Description" />
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
                <a class="btn btn-secondary" href="/categories">Back to List</a>
    </EditForm>
}
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to access this page.</p>
        <a href="/login" class="btn btn-primary">Go to Login</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [SupplyParameterFromQuery]
    public int CategoryId { get; set; }

    private Category? Category { get; set; }
    private CategoryUpdateDTO editableCategory = new();
    private EditContext? editContext;

    protected override async Task OnParametersSetAsync()
    {
        Category = await CategoryService.GetCategoryByIdAsync(CategoryId);

        if (Category == null)
        {
            NavigationManager.NavigateTo("/notfound");
            return;
        }

        editableCategory.CategoryId = Category.CategoryId;
        editableCategory.CategoryName = Category.CategoryName;
        editableCategory.Description = Category.Description;

        editContext = new EditContext(editableCategory);
    }

    private async Task UpdateCategory()
    {
        if (Category == null) return;

        Category.CategoryName = editableCategory.CategoryName;
        Category.Description = editableCategory.Description;

        await CategoryService.UpdateCategoryAsync(Category);
        NavigationManager.NavigateTo("/categories");
    }
}