@page "/categories"
@using Microsoft.AspNetCore.SignalR.Client
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Category List</PageTitle>

<AuthorizeView Roles="Admin" Context="auth">
    <Authorized>
        <h3>Category List</h3>

        <p>
            <button class="btn btn-success" @onclick="CreateCategory">Create New</button>
        </p>

        @if (categories == null)
        {
            <p><em>Loading categories...</em></p>
        }
        else if (!categories.Any())
        {
            <p>No categories found.</p>
        }
        else
        {
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Category Name</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in categories)
                    {
                        <tr>
                            <td>@category.CategoryName</td>
                            <td>@category.Description</td>
                            <td>
                                <a class="btn btn-sm btn-info" href="@($"/categories/edit?CategoryId={category.CategoryId}")">Edit</a>
                                <a class="btn btn-sm btn-secondary" href="@($"/categories/details?CategoryId={category.CategoryId}")">Details</a>
                                <a class="btn btn-sm btn-danger" href="@($"/categories/delete?CategoryId={category.CategoryId}")">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to access this page.</p>
        <a href="/login" class="btn btn-primary">Go to Login</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Category>? categories;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAllCategoriesAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/productcategoryhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<CategorySignalRDTO>("CategoryCreated", dto =>
        {
            categories ??= new();
            categories.Add(new Category
                {
                    CategoryId = dto.CategoryId,
                    CategoryName = dto.CategoryName,
                    Description = dto.Description
                });
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<CategorySignalRDTO>("CategoryUpdated", dto =>
        {
            var index = categories?.FindIndex(c => c.CategoryId == dto.CategoryId) ?? -1;
            if (index >= 0)
            {
                categories![index] = new Category
                    {
                        CategoryId = dto.CategoryId,
                        CategoryName = dto.CategoryName,
                        Description = dto.Description
                    };
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<int>("CategoryDeleted", id =>
        {
            var c = categories?.FirstOrDefault(c => c.CategoryId == id);
            if (c != null)
            {
                categories?.Remove(c);
                InvokeAsync(StateHasChanged);
            }
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started for Category");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR for Category failed: {ex.Message}");
        }
    }

    private void CreateCategory()
    {
        NavigationManager.NavigateTo("/categories/create");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
