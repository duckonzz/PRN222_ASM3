@page "/products"
@using BusinessObject.Entities
@using Service.Services.Interfaces
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<PageTitle>Product List</PageTitle>

<h3>Product List</h3>

<p>
    <button class="btn btn-primary" @onclick="CreateProduct">Create New</button>
</p>

@if (products == null)
{
    <p><em>Loading products...</em></p>
}
else if (!products.Any())
{
    <p>No products found.</p>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Category ID</th>
                <th>Weight</th>
                <th>Unit Price</th>
                <th>Units In Stock</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductName</td>
                    <td>@product.CategoryId</td>
                    <td>@product.Weight</td>
                    <td>@product.UnitPrice</td>
                    <td>@product.UnitsInStock</td>
                    <td>
                        <a class="btn btn-sm btn-info" href="@($"/products/edit?ProductId={product.ProductId}")">Edit</a>
                        <a class="btn btn-sm btn-secondary" href="@($"/products/details?ProductId={product.ProductId}")">Details</a>
                        <a class="btn btn-sm btn-danger" href="@($"/products/delete?ProductId={product.ProductId}")">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProductsAsync();
    }

    private void CreateProduct()
    {
        NavigationManager.NavigateTo("/products/create");
    }
}
