@page "/products"
@using Microsoft.AspNetCore.SignalR.Client
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<PageTitle>Product List</PageTitle>

<AuthorizeView Roles="Admin" Context="auth">
    <Authorized>
        <h3>Product List</h3>

        <div class="row mb-3 justify-content-center">
            <div class="col-md-3">
                <InputText class="form-control" placeholder="Search name..." @bind-Value="searchName" />
            </div>
            <div class="col-md-3">
                <InputNumber class="form-control" placeholder="Unit Price..." @bind-Value="UnitPrice" />
            </div>
            <div class="col-md-2">
                <button class="btn btn-primary w-100" @onclick="ApplyFilter">Search</button>
            </div>
        </div>

        <p>
            <button class="btn btn-success" @onclick="CreateProduct">Create New</button>
        </p>

        @if (filteredProducts == null)
        {
            <p><em>Loading products...</em></p>
        }
        else if (!filteredProducts.Any())
        {
            <p>No products found.</p>
        }
        else
        {
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Category Name</th>
                        <th>Weight</th>
                        <th>Unit Price</th>
                        <th>Units In Stock</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in filteredProducts)
                    {
                        <tr>
                            <td>@product.ProductName</td>
                            <td>@product.Category.CategoryName</td>
                            <td>@product.Weight</td>
                            <td>@product.UnitPrice</td>
                            <td>@product.UnitsInStock</td>
                            <td>
                                <a class="btn btn-sm btn-info" href="@($"/products/edit?ProductId={product.ProductId}")">Edit</a>
                                <a class="btn btn-sm btn-secondary" href="@($"/products/details?ProductId={product.ProductId}")">Details</a>
                                <a class="btn btn-sm btn-danger" href="@($"/products/delete?ProductId={product.ProductId}")">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to access this page.</p>
        <a href="/login" class="btn btn-primary">Go to Login</a>
    </NotAuthorized>
</AuthorizeView>

@code
{
    private List<Product>? products;
    private List<Product>? filteredProducts;
    private string? searchName;
    private decimal? UnitPrice;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProductsAsync();
        filteredProducts = products;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/productcategoryhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<ProductSignalRDTO>("ProductCreated", dto =>
        {
            Console.WriteLine("Received ProductCreated SignalR event!");

            if (products == null) products = new List<Product>();

            products?.Add(new Product
                {
                    ProductId = dto.ProductId,
                    ProductName = dto.ProductName,
                    CategoryId = dto.CategoryId,
                    Weight = dto.Weight,
                    UnitPrice = dto.UnitPrice,
                    UnitsInStock = dto.UnitsInStock
                });
            ApplyFilter();
            InvokeAsync(StateHasChanged);
        });


        hubConnection.On<Product>("ProductUpdated", dto =>
        {
            var index = products?.FindIndex(p => p.ProductId == dto.ProductId) ?? -1;
            if (index >= 0)
            {
                products![index] = new Product
                    {
                        ProductId = dto.ProductId,
                        ProductName = dto.ProductName,
                        CategoryId = dto.CategoryId,
                        Weight = dto.Weight,
                        UnitPrice = dto.UnitPrice,
                        UnitsInStock = dto.UnitsInStock
                    };

                ApplyFilter();
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<int>("ProductDeleted", id =>
        {
            var p = products?.FirstOrDefault(p => p.ProductId == id);
            if (p != null)
            {
                products?.Remove(p);
                ApplyFilter();
                InvokeAsync(StateHasChanged);
            }
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR failed: {ex.Message}");
        }
    }

    private void CreateProduct()
    {
        NavigationManager.NavigateTo("/products/create");
    }

    private void ApplyFilter()
    {
        if (products == null) return;

        filteredProducts = products.Where(p =>
            (string.IsNullOrWhiteSpace(searchName) || p.ProductName.Contains(searchName, StringComparison.OrdinalIgnoreCase)) &&
            (!UnitPrice.HasValue || p.UnitPrice <= UnitPrice.Value)
        ).ToList();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
